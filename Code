import java.io.*; 		// Saad Ahmad 5/1/2024
import java.util.*;

class Student implements Serializable {
    private String name;
    private int id;
    private HashMap<String, Integer> grades;

    // Constructor to initialize a Student object
    public Student(String name, int id) {
        this.name = name;
        this.id = id;
        this.grades = new HashMap<>();
    }

    // Getter method for student name
    public String getName() {
        return name;
    }

    // Getter method for student ID
    public int getId() {
        return id;
    }

    // Method to add a grade for a specific assignment
    public void addGrade(String assignment, int grade) {
        grades.put(assignment, grade);
    }

    // Method to remove a grade for a specific assignment
    public void removeGrade(String assignment) {
        grades.remove(assignment);
    }

    // Method to calculate the final grade based on all grades
    public double calculateFinalGrade() {
        int total = 0;
        int numGrades = grades.size();
        if (numGrades == 0) {
            return 0.0;
        }
        for (int grade : grades.values()) {
            total += grade;
        }
        return (double) total / numGrades;
    }

    // Method to print the student's report card
    public void printReportCard() {
        System.out.println("Report Card for: " + name);
        for (Map.Entry<String, Integer> entry : grades.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
        System.out.println("Final Grade: " + calculateFinalGrade());
    }
}

public class GradebookManagementSystem {
    private ArrayList<Student> students;

    // Constructor to initialize the GradebookManagementSystem object
    public GradebookManagementSystem() {
        students = new ArrayList<>();
    }

    // Method to add a student to the system
    public void addStudent(Student student) {
        students.add(student);
    }

    // Method to remove a student from the system based on ID
    public void removeStudent(int id) {
        for (Iterator<Student> iterator = students.iterator(); iterator.hasNext();) {
            Student student = iterator.next();
            if (student.getId() == id) {
                iterator.remove();
                System.out.println("Student with ID " + id + " removed successfully.");
                return;
            }
        }
        System.out.println("Student with ID " + id + " not found.");
    }

    // Method to add a grade for a specific student
    public void addGrade(int id, String assignment, int grade) {
        for (Student student : students) {
            if (student.getId() == id) {
                student.addGrade(assignment, grade);
                System.out.println("Grade added for student with ID " + id + ".");
                return;
            }
        }
        System.out.println("Student with ID " + id + " not found.");
    }

    // Method to remove a grade for a specific student
    public void removeGrade(int id, String assignment) {
        for (Student student : students) {
            if (student.getId() == id) {
                student.removeGrade(assignment);
                System.out.println("Grade removed for student with ID " + id + ".");
                return;
            }
        }
        System.out.println("Student with ID " + id + " not found.");
    }

    // Method to display grades for all students or a specific student
    public void displayStudentGrades(Scanner scanner) {
        System.out.println("Choose an option:");
        System.out.println("1. View all student grades");
        System.out.println("2. View grades for a specific student");
        System.out.print("Enter your choice: ");
        int choice = Integer.parseInt(scanner.nextLine());

        switch (choice) {
            case 1:
                for (Student student : students) {
                    student.printReportCard();
                    System.out.println(); // Add a newline between each student's report card
                }
                break;
            case 2:
                System.out.print("Enter student ID to display grades: ");
                int id = Integer.parseInt(scanner.nextLine());
                boolean found = false;
                for (Student student : students) {
                    if (student.getId() == id) {
                        student.printReportCard();
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    System.out.println("Student with ID " + id + " not found.");
                }
                break;
            default:
                System.out.println("Invalid choice. Please enter 1 or 2.");
        }
    }

    // Method to save data to a file
    public void saveDataToFile(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(students);
            System.out.println("Data saved to file: " + filename);
        } catch (IOException e) {
            System.out.println("Error saving data to file: " + e.getMessage());
        }
    }

    // Method to read data from a file
    public void readDataFromFile(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            students = (ArrayList<Student>) ois.readObject();
            System.out.println("Data loaded from file: " + filename);
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading data from file: " + e.getMessage());
        }
    }

    // Main method to run the Gradebook Management System
    public static void main(String[] args) {
        GradebookManagementSystem gradebook = new GradebookManagementSystem();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Add Student\n2. Remove Student\n3. Add Grade\n4. Remove Grade\n5. Display Student Grades\n6. Save Data to File\n7. Read Data from File\n8. Exit");
            System.out.print("Enter your choice: ");
            int choice = Integer.parseInt(scanner.nextLine());

            switch (choice) {
                case 1:
                    System.out.print("Enter student name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter student ID: ");
                    int id = Integer.parseInt(scanner.nextLine());
                    gradebook.addStudent(new Student(name, id));
                    break;
                case 2:
                    System.out.print("Enter student ID to remove: ");
                    int removeId = Integer.parseInt(scanner.nextLine());
                    gradebook.removeStudent(removeId);
                    break;
                case 3:
                    System.out.print("Enter student ID: ");
                    int addId = Integer.parseInt(scanner.nextLine());
                    System.out.print("Enter assignment/exam name: ");
                    String assignment = scanner.nextLine();
                    System.out.print("Enter grade: ");
                    int grade = Integer.parseInt(scanner.nextLine());
                    gradebook.addGrade(addId, assignment, grade);
                    break;
                case 4:
                    System.out.print("Enter student ID: ");
                    int removeGradeId = Integer.parseInt(scanner.nextLine());
                    System.out.print("Enter assignment/exam name to remove grade: ");
                    String removeAssignment = scanner.nextLine();
                    gradebook.removeGrade(removeGradeId, removeAssignment);
                    break;
                case 5:
                    gradebook.displayStudentGrades(scanner);
                    break;
                case 6:
                    System.out.print("Enter file name to save data: ");
                    String saveFileName = scanner.nextLine();
                    gradebook.saveDataToFile(saveFileName);
                    break;
                case 7:
                    System.out.print("Enter file name to read data from: ");
                    String readFileName = scanner.nextLine();
                    gradebook.readDataFromFile(readFileName);
                    break;
                case 8:
                    System.out.println("Exiting program...");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a number between 1 and 8.");
            }
        }
    }
}
